// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/app/provider/v1beta1/provider_api.proto

package providerv1beta1

import (
	context "context"
	fmt "fmt"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// REQUIRED.
// View mode.
type OpenInAppRequest_ViewMode int32

const (
	OpenInAppRequest_VIEW_MODE_INVALID OpenInAppRequest_ViewMode = 0
	// The resource can be opened but not downloaded.
	OpenInAppRequest_VIEW_MODE_VIEW_ONLY OpenInAppRequest_ViewMode = 1
	// The resource can be downloaded.
	OpenInAppRequest_VIEW_MODE_READ_ONLY OpenInAppRequest_ViewMode = 2
	// The resource can be downloaded and updated.
	OpenInAppRequest_VIEW_MODE_READ_WRITE OpenInAppRequest_ViewMode = 3
)

var OpenInAppRequest_ViewMode_name = map[int32]string{
	0: "VIEW_MODE_INVALID",
	1: "VIEW_MODE_VIEW_ONLY",
	2: "VIEW_MODE_READ_ONLY",
	3: "VIEW_MODE_READ_WRITE",
}

var OpenInAppRequest_ViewMode_value = map[string]int32{
	"VIEW_MODE_INVALID":    0,
	"VIEW_MODE_VIEW_ONLY":  1,
	"VIEW_MODE_READ_ONLY":  2,
	"VIEW_MODE_READ_WRITE": 3,
}

func (x OpenInAppRequest_ViewMode) String() string {
	return proto.EnumName(OpenInAppRequest_ViewMode_name, int32(x))
}

func (OpenInAppRequest_ViewMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{0, 0}
}

// REQUIRED.
// View mode.
type OpenFileInAppProviderRequest_ViewMode int32

const (
	OpenFileInAppProviderRequest_VIEW_MODE_INVALID OpenFileInAppProviderRequest_ViewMode = 0
	// The file can be opened but not downloaded.
	OpenFileInAppProviderRequest_VIEW_MODE_VIEW_ONLY OpenFileInAppProviderRequest_ViewMode = 1
	// The file can be downloaded.
	OpenFileInAppProviderRequest_VIEW_MODE_READ_ONLY OpenFileInAppProviderRequest_ViewMode = 2
	// The file can be downloaded and updated.
	OpenFileInAppProviderRequest_VIEW_MODE_READ_WRITE OpenFileInAppProviderRequest_ViewMode = 3
)

var OpenFileInAppProviderRequest_ViewMode_name = map[int32]string{
	0: "VIEW_MODE_INVALID",
	1: "VIEW_MODE_VIEW_ONLY",
	2: "VIEW_MODE_READ_ONLY",
	3: "VIEW_MODE_READ_WRITE",
}

var OpenFileInAppProviderRequest_ViewMode_value = map[string]int32{
	"VIEW_MODE_INVALID":    0,
	"VIEW_MODE_VIEW_ONLY":  1,
	"VIEW_MODE_READ_ONLY":  2,
	"VIEW_MODE_READ_WRITE": 3,
}

func (x OpenFileInAppProviderRequest_ViewMode) String() string {
	return proto.EnumName(OpenFileInAppProviderRequest_ViewMode_name, int32(x))
}

func (OpenFileInAppProviderRequest_ViewMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{2, 0}
}

type OpenInAppRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The resourceInfo to be opened. The gateway grpc message has a ref instead.
	ResourceInfo *v1beta11.ResourceInfo    `protobuf:"bytes,2,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	ViewMode     OpenInAppRequest_ViewMode `protobuf:"varint,3,opt,name=view_mode,json=viewMode,proto3,enum=cs3.app.provider.v1beta1.OpenInAppRequest_ViewMode" json:"view_mode,omitempty"`
	// REQUIRED.
	// The access token this application provider will use when contacting
	// the storage provider to read and write.
	// Service implementors MUST make sure that the access token only grants
	// access to the requested resource.
	// Service implementors should use a Reference with a root_id and an empty path to grant access, as
	// root_ids MUST NOT change when a resource is renamed.
	// The access token MUST be short-lived.
	// TODO(labkode): investigate token derivation techniques.
	AccessToken string `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// OPTIONAL.
	// A reference to the application to be used to open the resource, should the
	// default inferred from the resource's mimetype be overridden by user's choice.
	// If the targeted resource is a directory, this parameter is required and
	// in its absence the implementation MUST return INVALID_ARGUMENT.
	App                  string   `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenInAppRequest) Reset()         { *m = OpenInAppRequest{} }
func (m *OpenInAppRequest) String() string { return proto.CompactTextString(m) }
func (*OpenInAppRequest) ProtoMessage()    {}
func (*OpenInAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{0}
}

func (m *OpenInAppRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenInAppRequest.Unmarshal(m, b)
}
func (m *OpenInAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenInAppRequest.Marshal(b, m, deterministic)
}
func (m *OpenInAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenInAppRequest.Merge(m, src)
}
func (m *OpenInAppRequest) XXX_Size() int {
	return xxx_messageInfo_OpenInAppRequest.Size(m)
}
func (m *OpenInAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenInAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenInAppRequest proto.InternalMessageInfo

func (m *OpenInAppRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenInAppRequest) GetResourceInfo() *v1beta11.ResourceInfo {
	if m != nil {
		return m.ResourceInfo
	}
	return nil
}

func (m *OpenInAppRequest) GetViewMode() OpenInAppRequest_ViewMode {
	if m != nil {
		return m.ViewMode
	}
	return OpenInAppRequest_VIEW_MODE_INVALID
}

func (m *OpenInAppRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *OpenInAppRequest) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

type OpenInAppResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The url that user agents will render to clients.
	// Usually the rendering happens by using HTML iframes or in separate browser tabs.
	AppUrl               string   `protobuf:"bytes,3,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenInAppResponse) Reset()         { *m = OpenInAppResponse{} }
func (m *OpenInAppResponse) String() string { return proto.CompactTextString(m) }
func (*OpenInAppResponse) ProtoMessage()    {}
func (*OpenInAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{1}
}

func (m *OpenInAppResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenInAppResponse.Unmarshal(m, b)
}
func (m *OpenInAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenInAppResponse.Marshal(b, m, deterministic)
}
func (m *OpenInAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenInAppResponse.Merge(m, src)
}
func (m *OpenInAppResponse) XXX_Size() int {
	return xxx_messageInfo_OpenInAppResponse.Size(m)
}
func (m *OpenInAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenInAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenInAppResponse proto.InternalMessageInfo

func (m *OpenInAppResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *OpenInAppResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenInAppResponse) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

type OpenFileInAppProviderRequest struct {
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The resourceInfo to be opened. The gateway grpc message has a ref instead.
	ResourceInfo *v1beta11.ResourceInfo                `protobuf:"bytes,2,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	ViewMode     OpenFileInAppProviderRequest_ViewMode `protobuf:"varint,3,opt,name=view_mode,json=viewMode,proto3,enum=cs3.app.provider.v1beta1.OpenFileInAppProviderRequest_ViewMode" json:"view_mode,omitempty"`
	// REQUIRED.
	// The access token this application provider will use when contacting
	// the storage provider to read and write.
	// Service implementors MUST make sure that the access token only grants
	// access to the requested resource.
	// Service implementors should use a Reference with a root_id and an empty path to grant access, as
	// root_ids MUST NOT change when a resource is renamed.
	// The access token MUST be short-lived.
	// TODO(labkode): investigate token derivation techniques.
	AccessToken          string   `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFileInAppProviderRequest) Reset()         { *m = OpenFileInAppProviderRequest{} }
func (m *OpenFileInAppProviderRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFileInAppProviderRequest) ProtoMessage()    {}
func (*OpenFileInAppProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{2}
}

func (m *OpenFileInAppProviderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Unmarshal(m, b)
}
func (m *OpenFileInAppProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Marshal(b, m, deterministic)
}
func (m *OpenFileInAppProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFileInAppProviderRequest.Merge(m, src)
}
func (m *OpenFileInAppProviderRequest) XXX_Size() int {
	return xxx_messageInfo_OpenFileInAppProviderRequest.Size(m)
}
func (m *OpenFileInAppProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFileInAppProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFileInAppProviderRequest proto.InternalMessageInfo

func (m *OpenFileInAppProviderRequest) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenFileInAppProviderRequest) GetResourceInfo() *v1beta11.ResourceInfo {
	if m != nil {
		return m.ResourceInfo
	}
	return nil
}

func (m *OpenFileInAppProviderRequest) GetViewMode() OpenFileInAppProviderRequest_ViewMode {
	if m != nil {
		return m.ViewMode
	}
	return OpenFileInAppProviderRequest_VIEW_MODE_INVALID
}

func (m *OpenFileInAppProviderRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type OpenFileInAppProviderResponse struct {
	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The url that user agents will render to clients.
	// Usually the rendering happens by using HTML iframes or in separate browser tabs.
	AppProviderUrl       string   `protobuf:"bytes,3,opt,name=app_provider_url,json=appProviderUrl,proto3" json:"app_provider_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFileInAppProviderResponse) Reset()         { *m = OpenFileInAppProviderResponse{} }
func (m *OpenFileInAppProviderResponse) String() string { return proto.CompactTextString(m) }
func (*OpenFileInAppProviderResponse) ProtoMessage()    {}
func (*OpenFileInAppProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c007b70b037097fe, []int{3}
}

func (m *OpenFileInAppProviderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Unmarshal(m, b)
}
func (m *OpenFileInAppProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Marshal(b, m, deterministic)
}
func (m *OpenFileInAppProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFileInAppProviderResponse.Merge(m, src)
}
func (m *OpenFileInAppProviderResponse) XXX_Size() int {
	return xxx_messageInfo_OpenFileInAppProviderResponse.Size(m)
}
func (m *OpenFileInAppProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFileInAppProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFileInAppProviderResponse proto.InternalMessageInfo

func (m *OpenFileInAppProviderResponse) GetStatus() *v1beta12.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *OpenFileInAppProviderResponse) GetOpaque() *v1beta1.Opaque {
	if m != nil {
		return m.Opaque
	}
	return nil
}

func (m *OpenFileInAppProviderResponse) GetAppProviderUrl() string {
	if m != nil {
		return m.AppProviderUrl
	}
	return ""
}

func init() {
	proto.RegisterEnum("cs3.app.provider.v1beta1.OpenInAppRequest_ViewMode", OpenInAppRequest_ViewMode_name, OpenInAppRequest_ViewMode_value)
	proto.RegisterEnum("cs3.app.provider.v1beta1.OpenFileInAppProviderRequest_ViewMode", OpenFileInAppProviderRequest_ViewMode_name, OpenFileInAppProviderRequest_ViewMode_value)
	proto.RegisterType((*OpenInAppRequest)(nil), "cs3.app.provider.v1beta1.OpenInAppRequest")
	proto.RegisterType((*OpenInAppResponse)(nil), "cs3.app.provider.v1beta1.OpenInAppResponse")
	proto.RegisterType((*OpenFileInAppProviderRequest)(nil), "cs3.app.provider.v1beta1.OpenFileInAppProviderRequest")
	proto.RegisterType((*OpenFileInAppProviderResponse)(nil), "cs3.app.provider.v1beta1.OpenFileInAppProviderResponse")
}

func init() {
	proto.RegisterFile("cs3/app/provider/v1beta1/provider_api.proto", fileDescriptor_c007b70b037097fe)
}

var fileDescriptor_c007b70b037097fe = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x1c, 0x7f, 0x84, 0x66, 0x5a, 0x8a, 0x3b, 0x50, 0xd5, 0x44, 0xad, 0x54, 0xb2, 0x8a,
	0x5a, 0x34, 0x51, 0x1a, 0x09, 0x96, 0xc8, 0x6d, 0x83, 0x64, 0xa9, 0x6d, 0x2c, 0xd3, 0xa6, 0x02,
	0x45, 0xb2, 0xa6, 0xce, 0x14, 0x59, 0xa4, 0x9e, 0xdb, 0x19, 0x27, 0x15, 0x2b, 0xb6, 0x2c, 0x58,
	0x20, 0x1e, 0x81, 0x25, 0x12, 0x2f, 0xc2, 0x43, 0x21, 0xe4, 0xf1, 0xd8, 0x09, 0x0d, 0x41, 0xa1,
	0x8b, 0x8a, 0x9d, 0xe7, 0x9e, 0x73, 0x66, 0xee, 0xcf, 0xf1, 0x45, 0xdb, 0xa1, 0x6c, 0x35, 0x28,
	0x40, 0x03, 0x04, 0x1f, 0x45, 0x7d, 0x26, 0x1a, 0xa3, 0xe6, 0x19, 0x4b, 0x68, 0xb3, 0x08, 0x04,
	0x14, 0x22, 0x02, 0x82, 0x27, 0x1c, 0xdb, 0xa1, 0x6c, 0x11, 0x0a, 0x40, 0x72, 0x8c, 0x68, 0x72,
	0x75, 0x3d, 0xbd, 0x46, 0x40, 0x58, 0xa8, 0x65, 0x42, 0x93, 0xa1, 0xcc, 0x74, 0xd5, 0x27, 0x29,
	0x2a, 0x13, 0x2e, 0xe8, 0x1b, 0x36, 0xfd, 0x90, 0x60, 0x92, 0x0f, 0x45, 0xc8, 0x72, 0xf6, 0x46,
	0xca, 0x4e, 0xde, 0x01, 0x93, 0x05, 0x45, 0x9d, 0x32, 0xb8, 0xf6, 0xd1, 0x44, 0x56, 0x07, 0x58,
	0xec, 0xc6, 0x0e, 0x80, 0xcf, 0x2e, 0x87, 0x4c, 0x26, 0xb8, 0x89, 0xca, 0x1c, 0xe8, 0xe5, 0x90,
	0xd9, 0xc6, 0xa6, 0x51, 0x5f, 0xdc, 0x79, 0x44, 0xd2, 0x54, 0x33, 0x99, 0xbe, 0x84, 0x74, 0x14,
	0xc1, 0xd7, 0x44, 0xdc, 0x41, 0xf7, 0xf2, 0x97, 0x83, 0x28, 0x3e, 0xe7, 0x76, 0x49, 0x29, 0xb7,
	0x94, 0x52, 0x27, 0x3b, 0x55, 0x28, 0xf1, 0xb5, 0xc4, 0x8d, 0xcf, 0xb9, 0xbf, 0x24, 0x26, 0x4e,
	0xd8, 0x43, 0x95, 0x51, 0xc4, 0xae, 0x82, 0x0b, 0xde, 0x67, 0xb6, 0xb9, 0x69, 0xd4, 0x97, 0x77,
	0x5a, 0x64, 0x56, 0xc7, 0xc8, 0xf5, 0x12, 0x48, 0x37, 0x62, 0x57, 0x87, 0xbc, 0xcf, 0xfc, 0x85,
	0x91, 0xfe, 0xc2, 0x8f, 0xd1, 0x12, 0x0d, 0x43, 0x26, 0x65, 0x90, 0xf0, 0xb7, 0x2c, 0xb6, 0xff,
	0xdf, 0x34, 0xea, 0x15, 0x7f, 0x31, 0x8b, 0x1d, 0xa7, 0x21, 0x6c, 0x21, 0x93, 0x02, 0xd8, 0x77,
	0x14, 0x92, 0x7e, 0xd6, 0x2e, 0xd0, 0x42, 0x7e, 0x15, 0x5e, 0x45, 0x2b, 0x5d, 0xb7, 0x7d, 0x1a,
	0x1c, 0x76, 0xf6, 0xdb, 0x81, 0x7b, 0xd4, 0x75, 0x0e, 0xdc, 0x7d, 0xeb, 0x3f, 0xbc, 0x86, 0x1e,
	0x8c, 0xc3, 0xea, 0xab, 0x73, 0x74, 0xf0, 0xca, 0x32, 0x7e, 0x05, 0xfc, 0xb6, 0xb3, 0x9f, 0x01,
	0x25, 0x6c, 0xa3, 0x87, 0xd7, 0x80, 0x53, 0xdf, 0x3d, 0x6e, 0x5b, 0x66, 0xed, 0x93, 0x81, 0x56,
	0x26, 0x6a, 0x91, 0xc0, 0x63, 0xc9, 0x70, 0x03, 0x95, 0x33, 0x07, 0xe8, 0x79, 0xac, 0xa9, 0x46,
	0x08, 0x08, 0x8b, 0xfa, 0x5f, 0x2a, 0xd8, 0xd7, 0xb4, 0x89, 0x01, 0x96, 0xe6, 0x1d, 0xe0, 0x1a,
	0xba, 0x4b, 0x01, 0x82, 0xa1, 0x18, 0xa8, 0x6e, 0x57, 0xfc, 0x32, 0x05, 0x38, 0x11, 0x83, 0xda,
	0x67, 0x13, 0xad, 0xa7, 0x29, 0xbd, 0x88, 0x06, 0x4c, 0xa5, 0xe5, 0xe9, 0xe6, 0xff, 0x4b, 0x6e,
	0xe9, 0x4d, 0xbb, 0xe5, 0xf9, 0x9f, 0xdd, 0x32, 0xab, 0x9c, 0x9b, 0x39, 0xe7, 0xb6, 0x7d, 0xf2,
	0xcd, 0x40, 0x1b, 0x33, 0xaa, 0xb8, 0x45, 0xcf, 0xd4, 0x91, 0x95, 0x7a, 0xa6, 0xd8, 0x6d, 0x63,
	0xf3, 0x2c, 0xd3, 0x71, 0x4a, 0x27, 0x62, 0xb0, 0xf3, 0xc3, 0x40, 0x8b, 0xf9, 0xd9, 0xf1, 0x5c,
	0xfc, 0xc1, 0x40, 0xab, 0xbf, 0xcd, 0x1f, 0x3f, 0xbd, 0xd9, 0xd8, 0xaa, 0xcf, 0xfe, 0x5a, 0xa7,
	0x1b, 0xd5, 0x47, 0x95, 0xe2, 0x8f, 0xc3, 0x5b, 0xf3, 0xaf, 0x98, 0xea, 0xf6, 0x5c, 0xdc, 0xec,
	0x95, 0xdd, 0xf7, 0x68, 0x3d, 0xe4, 0x17, 0x33, 0x15, 0xbb, 0x56, 0xd1, 0x1d, 0x88, 0xbc, 0x74,
	0x33, 0x7b, 0xc6, 0xeb, 0xfb, 0x39, 0x4b, 0x93, 0xbe, 0x94, 0xcc, 0x3d, 0xc7, 0xfb, 0x5a, 0xb2,
	0xf7, 0x64, 0x8b, 0x38, 0x00, 0x24, 0xd7, 0x90, 0x6e, 0x73, 0x37, 0x25, 0x7c, 0x57, 0x50, 0xcf,
	0x01, 0xe8, 0xe5, 0x50, 0x4f, 0x43, 0x67, 0x65, 0xb5, 0xef, 0x5b, 0x3f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0x64, 0x8b, 0x1d, 0xa3, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProviderAPIClient is the client API for ProviderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderAPIClient interface {
	// Returns the App provider URL (deprecated)
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenFileInAppProvider(ctx context.Context, in *OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*OpenFileInAppProviderResponse, error)
	// Returns the App provider URL
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenInApp(ctx context.Context, in *OpenInAppRequest, opts ...grpc.CallOption) (*OpenInAppResponse, error)
}

type providerAPIClient struct {
	cc *grpc.ClientConn
}

func NewProviderAPIClient(cc *grpc.ClientConn) ProviderAPIClient {
	return &providerAPIClient{cc}
}

func (c *providerAPIClient) OpenFileInAppProvider(ctx context.Context, in *OpenFileInAppProviderRequest, opts ...grpc.CallOption) (*OpenFileInAppProviderResponse, error) {
	out := new(OpenFileInAppProviderResponse)
	err := c.cc.Invoke(ctx, "/cs3.app.provider.v1beta1.ProviderAPI/OpenFileInAppProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) OpenInApp(ctx context.Context, in *OpenInAppRequest, opts ...grpc.CallOption) (*OpenInAppResponse, error) {
	out := new(OpenInAppResponse)
	err := c.cc.Invoke(ctx, "/cs3.app.provider.v1beta1.ProviderAPI/OpenInApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderAPIServer is the server API for ProviderAPI service.
type ProviderAPIServer interface {
	// Returns the App provider URL (deprecated)
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenFileInAppProvider(context.Context, *OpenFileInAppProviderRequest) (*OpenFileInAppProviderResponse, error)
	// Returns the App provider URL
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenInApp(context.Context, *OpenInAppRequest) (*OpenInAppResponse, error)
}

// UnimplementedProviderAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProviderAPIServer struct {
}

func (*UnimplementedProviderAPIServer) OpenFileInAppProvider(ctx context.Context, req *OpenFileInAppProviderRequest) (*OpenFileInAppProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFileInAppProvider not implemented")
}
func (*UnimplementedProviderAPIServer) OpenInApp(ctx context.Context, req *OpenInAppRequest) (*OpenInAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenInApp not implemented")
}

func RegisterProviderAPIServer(s *grpc.Server, srv ProviderAPIServer) {
	s.RegisterService(&_ProviderAPI_serviceDesc, srv)
}

func _ProviderAPI_OpenFileInAppProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileInAppProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).OpenFileInAppProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.app.provider.v1beta1.ProviderAPI/OpenFileInAppProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).OpenFileInAppProvider(ctx, req.(*OpenFileInAppProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_OpenInApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenInAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).OpenInApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cs3.app.provider.v1beta1.ProviderAPI/OpenInApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).OpenInApp(ctx, req.(*OpenInAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.app.provider.v1beta1.ProviderAPI",
	HandlerType: (*ProviderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenFileInAppProvider",
			Handler:    _ProviderAPI_OpenFileInAppProvider_Handler,
		},
		{
			MethodName: "OpenInApp",
			Handler:    _ProviderAPI_OpenInApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/app/provider/v1beta1/provider_api.proto",
}
